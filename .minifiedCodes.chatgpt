<"file: .eslintrc.json">{"env": {"browser": false,"commonjs": true,"es6": true,"node": true,"mocha": true},"parserOptions": {"ecmaVersion": 2018,"ecmaFeatures": {"jsx": true},"sourceType": "module"},"rules": {"no-const-assign": "warn","no-this-before-super": "warn","no-undef": "warn","no-unreachable": "warn","no-unused-vars": "warn","constructor-super": "warn","valid-typeof": "warn"}}</"file: .eslintrc.json">

<"file: .vscode\extensions.json">{// See https://go.microsoft.com/fwlink/?LinkId=733558// for the documentation about the extensions.json format"recommendations": ["dbaeumer.vscode-eslint"]}</"file: .vscode\extensions.json">

<"file: .vscode\launch.json">// A launch configuration that launches the extension inside a new window// Use IntelliSense to learn about possible attributes.// Hover to view descriptions of existing attributes.// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387{"version": "0.2.0","configurations": [{"name": "Run Extension","type": "extensionHost","request": "launch","args": ["--extensionDevelopmentPath=${workspaceFolder}"]},{"name": "Extension Tests","type": "extensionHost","request": "launch","args": ["--extensionDevelopmentPath=${workspaceFolder}","--extensionTestsPath=${workspaceFolder}/test/suite/index"]}]}</"file: .vscode\launch.json">

<"file: extension.js">const fs = require("fs"),path = require("path"),vscode = require("vscode"),htmlMinifier = require("html-minifier").minify,JavaScriptObfuscator = require("javascript-obfuscator");class Minifier {async obfuscateJsFiles(files) {const obfuscatedSummary = [];for (const file of files) {const filePath = path.join(this.outputFilePath, "..", file.path);try {const fileContent = fs.readFileSync(filePath, "utf-8");const obfuscatedCode = JavaScriptObfuscator.obfuscate(fileContent);fs.writeFileSync(filePath, obfuscatedCode.getObfuscatedCode());obfuscatedSummary.push(`<"file: ${file.path}">Successfully obfuscated</"file: ${file.path}">`);} catch (error) {obfuscatedSummary.push(`<"file: ${file.path}">Couldn't be obfuscated: ${error.message}</"file: ${file.path}">`);}}fs.writeFileSync(path.join(this.outputFilePath, "..", "obfuscated.txt"), obfuscatedSummary.join("\n"));}constructor(e, i) {this.files = e, this.outputFilePath = i, this.errors = []}shouldIgnoreFile(file, ignoredExtensions) {return ignoredExtensions.some(ext => file.endsWith(ext));}customMinify(content) {return content.split('\n').map(line => line.trim()).join('');}async minifyFiles() {if (fs.existsSync(this.outputFilePath) && fs.unlinkSync(this.outputFilePath), await Promise.all(this.files.map(async e => {if ("package-lock" === e.name || this.shouldIgnoreFile(e.name, ['.png', '.jpg', '.sample', '.lock', '.md', '.babelrc', '.vsix', '.vscodeignore'])) return;const i = path.join(this.outputFilePath, "..", e.path),t = fs.readFileSync(i).toString();let s;try {switch (e.extension) {case "scss":case "tsx":case "ts":case "json":case "js":case "css":s = this.customMinify(t);break;case "html":case "ejs":case "pug":s = htmlMinifier(t, { removeComments: true, collapseWhitespace: true });break;default:throw new Error("Unsupported file format")}const n = `<"file: ${e.path}">`,o = `</"file: ${e.path}">`;fs.appendFileSync(this.outputFilePath, `${n}${s}${o}${n.includes("file: ")?"\n\n":""}`)} catch (i) {const t = `Error minifying ${e.path}: ${i.message}`;this.errors.push(t)}})), this.errors.length > 0) {const e = this.errors.join("\n"),i = `<"file: error.txt">${e}</"file: error.txt">\n\n`;fs.appendFileSync(this.outputFilePath, i);const t = "Fix the errors and re-run the minify command.",s = `<"file: instructions.txt">${t}</"file: instructions.txt">\n\n`;fs.appendFileSync(this.outputFilePath, s)}}}function getFiles(baseDir, currentDir, ignoredItems, ignoreDot, ignoreMin) {const files = [];const items = fs.readdirSync(currentDir);// Add package-lock.json and dist to the ignoredItems listignoredItems.push('package-lock.json', 'dist');items.forEach(item => {const fullPath = path.join(currentDir, item);const relPath = path.relative(baseDir, fullPath);if (ignoredItems.includes(item) || ignoredItems.includes(relPath)) {return;}const stats = fs.statSync(fullPath);if (stats.isDirectory()) {if (item === "node_modules" || item === ".git") return; // Ignore node_modules and .git folderfiles.push(...getFiles(baseDir, fullPath, ignoredItems, ignoreDot, ignoreMin));} else if (stats.isFile()) {const ext = path.extname(item).substring(1);if ((ignoreDot && item.startsWith(".")) || (ignoreMin && ["min.js", "min.css"].includes(item))) {return;}files.push({path: relPath,name: item,extension: ext});}});return files;}const minifyCommand = vscode.commands.registerCommand("extension.minifyFiles", async () => {const e = vscode.workspace.workspaceFolders ? vscode.workspace.workspaceFolders[0].uri : (await vscode.window.showOpenDialog({canSelectFiles: !1,canSelectFolders: !0,canSelectMany: !1,openLabel: "Select Folder"}))[0];if (!e) return;const i = await vscode.window.showQuickPick([{label: "Ignore files starting by . (dot)?",value: "dot"},{label: 'Ignore files ending in "min.css" and "min.js"?',value: "min",picked: true},{label: "Ignore any other file or folder?",value: "other"}], {canPickMany: !0,placeHolder: "Select options to ignore (use checkboxes)"}),t = i.some(e => "dot" === e.value),s = i.some(e => "other" === e.value),n = i.some(e => "min" === e.value);let o = [];if (s) {const e = await vscode.window.showInputBox({prompt: "Enter the file or folder names to ignore, separated by commas"});e && (o = e.split(",").map(e => e.trim()))}const r = e.fsPath,a = path.join(r, ".minifiedCodes.chatgpt"),c = getFiles(r, r, o, t, n),l = new Minifier(c, a);l.minifyFiles();const h = await vscode.workspace.openTextDocument(a);await vscode.window.showTextDocument(h, vscode.ViewColumn.Active)const obfuscationOption = await vscode.window.showQuickPick([{ label: "Obfuscate current JS file", value: "current" },{ label: "Obfuscate all JS in the workspace", value: "all" },],{ placeHolder: "Select an obfuscation option" });const jsFiles = c.filter((file) => file.extension === "js");if (obfuscationOption && obfuscationOption.value) {const jsFiles = c.filter((file) => file.extension === "js");if (obfuscationOption.value === "current") {const activeTextEditor = vscode.window.activeTextEditor;if (activeTextEditor) {const activeDocument = activeTextEditor.document;const activeFile = jsFiles.find((file) => file.path === path.relative(r, activeDocument.uri.fsPath));if (activeFile) {await l.obfuscateJsFiles([activeFile]);}}} else if (obfuscationOption.value === "all") {await l.obfuscateJsFiles(jsFiles);}}});const obfuscateCurrentJSFile = vscode.commands.registerCommand("extension.obfuscateCurrentJSFile", async () => {const e = vscode.workspace.workspaceFolders ? vscode.workspace.workspaceFolders[0].uri : (await vscode.window.showOpenDialog({canSelectFiles: !1,canSelectFolders: !0,canSelectMany: !1,openLabel: "Select Folder"}))[0];if (!e) return;const r = e.fsPath,a = path.join(r, ".minifiedCodes.chatgpt"),c = getFiles(r, r, [], false, false),l = new Minifier(c, a);const activeTextEditor = vscode.window.activeTextEditor;if (activeTextEditor) {const activeDocument = activeTextEditor.document;const activeFile = c.find((file) => file.path === path.relative(r, activeDocument.uri.fsPath) && file.extension === "js");if (activeFile) {await l.obfuscateJsFiles([activeFile]);}}});const obfuscateAllJSInWorkspace = vscode.commands.registerCommand("extension.obfuscateAllJSInWorkspace", async () => {const e = vscode.workspace.workspaceFolders ? vscode.workspace.workspaceFolders[0].uri : (await vscode.window.showOpenDialog({canSelectFiles: !1,canSelectFolders: !0,canSelectMany: !1,openLabel: "Select Folder"}))[0];if (!e) return;const r = e.fsPath,a = path.join(r, ".minifiedCodes.chatgpt"),c = getFiles(r, r, [], false, false),l = new Minifier(c, a);const jsFiles = c.filter((file) => file.extension === "js");await l.obfuscateJsFiles(jsFiles);});exports.minifyCommand = minifyCommand;exports.obfuscateCurrentJSFile = obfuscateCurrentJSFile;exports.obfuscateAllJSInWorkspace = obfuscateAllJSInWorkspace;</"file: extension.js">
<"file: package.json">{"name": "code-minifier-for-chatgpt-prompts","version": "0.7.0","description": "ðŸš€ Minify files of a folder into one single file to make it part of ChatGPT Coding Prompts ðŸ§ ","displayName": "Code Minifier for ChatGPT Prompts","publisher": "lmsutools","repository": {"type": "git","url": "https://github.com/lmsutools/code-minifier-for-chatgpt-prompts"},"engines": {"vscode": "^1.45.0"},"keywords": ["minifyFiles","minify","prompts","Prompter","openai","natural language processing","NLP","ChatGPT Coding","javascript obfuscate","javascript obfuscator","js obfuscator"],"activationEvents": ["onCommand:extension.minifyFiles"],"main": "./extension.js","author": "A ChatGPT Prompter","icon": "images/icon.png","license": "MIT","dependencies": {"clean-css": "^4.2.3","glob": "^9.3.2","html-minifier": "^3.5.21","javascript-obfuscator": "^4.0.2","minify-xml": "^4.0.0","minimatch": "^7.4.3","strip-json-comments": "^5.0.0","terser": "^5.16.9","uglify-js": "^3.9.2"},"contributes": {"commands": [{"command": "extension.minifyFiles","title": "Code Minifier for ChatGPT Prompts"},{"command": "extension.obfuscateCurrentJSFile","title": "Obfuscate current JS file"},{"command": "extension.obfuscateAllJSInWorkspace","title": "Obfuscate all JS in the workspace"}]}}</"file: package.json">

<"file: jsconfig.json">{"compilerOptions": {"module": "commonjs","target": "ES2020","checkJs": true,  /* Typecheck .js files. */"lib": ["ES2020"]},"exclude": ["node_modules"]}</"file: jsconfig.json">


<"file: test\runTest.js">const path = require('path');const { runTests } = require('@vscode/test-electron');async function main() {try {// The folder containing the Extension Manifest package.json// Passed to `--extensionDevelopmentPath`const extensionDevelopmentPath = path.resolve(__dirname, '../');// The path to the extension test script// Passed to --extensionTestsPathconst extensionTestsPath = path.resolve(__dirname, './suite/index');// Download VS Code, unzip it and run the integration testawait runTests({ extensionDevelopmentPath, extensionTestsPath });} catch (err) {console.error('Failed to run tests', err);process.exit(1);}}main();</"file: test\runTest.js">

<"file: test\suite\extension.test.js">const assert = require('assert');// You can import and use all API from the 'vscode' module// as well as import your extension to test itconst vscode = require('vscode');// const myExtension = require('../extension');suite('Extension Test Suite', () => {vscode.window.showInformationMessage('Start all tests.');test('Sample test', () => {assert.strictEqual(-1, [1, 2, 3].indexOf(5));assert.strictEqual(-1, [1, 2, 3].indexOf(0));});});</"file: test\suite\extension.test.js">

<"file: test\suite\index.js">const path = require('path');const Mocha = require('mocha');const glob = require('glob');function run() {// Create the mocha testconst mocha = new Mocha({ui: 'tdd',color: true});const testsRoot = path.resolve(__dirname, '..');return new Promise((c, e) => {glob('**/**.test.js', { cwd: testsRoot }, (err, files) => {if (err) {return e(err);}// Add files to the test suitefiles.forEach(f => mocha.addFile(path.resolve(testsRoot, f)));try {// Run the mocha testmocha.run(failures => {if (failures > 0) {e(new Error(`${failures} tests failed.`));} else {c();}});} catch (err) {console.error(err);e(err);}});});}module.exports = {run};</"file: test\suite\index.js">

<"file: error.txt">Error minifying .gitignore: Unsupported file format
Error minifying .vscodeignore: Unsupported file format
Error minifying code-minifier-for-chatgpt-prompts-0.7.0.vsix: Unsupported file format
Error minifying desktop.ini: Unsupported file format</"file: error.txt">

<"file: instructions.txt">Fix the errors and re-run the minify command.</"file: instructions.txt">

